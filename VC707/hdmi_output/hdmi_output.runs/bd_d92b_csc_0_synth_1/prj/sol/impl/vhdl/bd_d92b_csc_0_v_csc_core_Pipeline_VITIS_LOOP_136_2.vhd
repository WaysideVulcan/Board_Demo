-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity bd_d92b_csc_0_v_csc_core_Pipeline_VITIS_LOOP_136_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    stream_in_dout : IN STD_LOGIC_VECTOR (35 downto 0);
    stream_in_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_in_empty_n : IN STD_LOGIC;
    stream_in_read : OUT STD_LOGIC;
    stream_csc_din : OUT STD_LOGIC_VECTOR (35 downto 0);
    stream_csc_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_csc_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    stream_csc_full_n : IN STD_LOGIC;
    stream_csc_write : OUT STD_LOGIC;
    add_ln134 : IN STD_LOGIC_VECTOR (12 downto 0);
    ColStart_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ColEnd_read : IN STD_LOGIC_VECTOR (15 downto 0);
    cmp20_not : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp17_not : IN STD_LOGIC_VECTOR (0 downto 0);
    K11_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K11_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K12_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K12_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K13_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K13_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K21_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K21_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K22_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K22_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K23_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K23_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K31_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K31_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K32_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K32_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K33_read : IN STD_LOGIC_VECTOR (15 downto 0);
    K33_2_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ClipMax_read : IN STD_LOGIC_VECTOR (11 downto 0);
    ClipMax_2_read : IN STD_LOGIC_VECTOR (11 downto 0);
    ClampMin_read : IN STD_LOGIC_VECTOR (11 downto 0);
    ClampMin_2_read : IN STD_LOGIC_VECTOR (11 downto 0);
    BOffset_read : IN STD_LOGIC_VECTOR (13 downto 0);
    BOffset_2_read : IN STD_LOGIC_VECTOR (13 downto 0);
    GOffset_read : IN STD_LOGIC_VECTOR (13 downto 0);
    GOffset_2_read : IN STD_LOGIC_VECTOR (13 downto 0);
    ROffset_read : IN STD_LOGIC_VECTOR (13 downto 0);
    ROffset_2_read : IN STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of bd_d92b_csc_0_v_csc_core_Pipeline_VITIS_LOOP_136_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv26_800 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln136_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal stream_in_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal stream_csc_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln150_2_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_2_reg_1128 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_2_reg_1128_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_2_reg_1128_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_2_reg_1128_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Rpix_fu_446_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal Rpix_reg_1146 : STD_LOGIC_VECTOR (11 downto 0);
    signal Rpix_reg_1146_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal Gpix_reg_1151 : STD_LOGIC_VECTOR (11 downto 0);
    signal Gpix_reg_1151_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln106_2_fu_497_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln192_fu_610_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln192_reg_1183 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln192_1_fu_616_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln192_1_reg_1189 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln194_fu_632_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln194_reg_1200 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln194_1_fu_638_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln194_1_reg_1206 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln196_fu_654_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln196_reg_1217 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln196_1_fu_660_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln196_1_reg_1223 : STD_LOGIC_VECTOR (27 downto 0);
    signal max_val_fu_666_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal max_val_reg_1229 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_val_fu_671_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal min_val_reg_1236 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln192_fu_700_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln192_reg_1243 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln192_1_fu_708_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln192_1_reg_1248 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln194_fu_746_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln194_reg_1253 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln194_1_fu_754_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln194_1_reg_1258 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln196_fu_792_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln196_reg_1263 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln196_1_fu_800_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln196_1_reg_1268 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln198_fu_822_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_reg_1273 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_1_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln198_1_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_reg_1283 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_1_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln199_1_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_reg_1293 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln200_1_reg_1298 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_fu_136 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    signal x_3_fu_435_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln136_fu_365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln148_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln148_1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln149_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln149_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln150_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln150_fu_417_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln150_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal coef33_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef23_fu_465_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef13_fu_460_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_487_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln150_11_fu_531_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln150_12_fu_544_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln150_13_fu_557_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal coef32_fu_526_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef31_fu_521_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef22_fu_516_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef21_fu_511_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef12_fu_506_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal coef11_fu_501_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal offsetR_fu_562_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln192_fu_600_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln192_fu_610_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln106_fu_594_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal mul_ln192_1_fu_616_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln106_1_fu_597_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal offsetG_fu_549_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln194_fu_622_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln194_fu_632_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln194_1_fu_638_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal offsetB_fu_536_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal or_ln196_fu_644_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln196_fu_654_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln196_1_fu_660_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln192_2_fu_687_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln192_1_fu_684_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln192_4_fu_690_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln192_fu_694_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_947_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln192_5_fu_711_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln192_4_fu_704_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln192_2_fu_714_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln194_2_fu_733_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln194_1_fu_730_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln194_4_fu_736_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln194_fu_740_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_957_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln194_5_fu_757_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln194_4_fu_750_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln194_2_fu_760_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln196_2_fu_779_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln196_1_fu_776_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal add_ln196_4_fu_782_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal add_ln196_fu_786_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal grp_fu_967_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln196_5_fu_803_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal sext_ln196_4_fu_796_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal add_ln196_2_fu_806_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal Rres_fu_720_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln110_fu_676_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln110_1_fu_680_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal Gres_fu_766_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal Bres_fu_812_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln192_3_fu_858_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_870_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln198_fu_880_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln194_3_fu_862_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln196_3_fu_866_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln2_fu_902_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln200_fu_912_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln1_fu_892_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln199_fu_924_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln200_1_fu_918_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln199_1_fu_930_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln198_1_fu_886_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_947_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_957_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_967_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_947_ce : STD_LOGIC;
    signal grp_fu_957_ce : STD_LOGIC;
    signal grp_fu_967_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component bd_d92b_csc_0_mul_16s_12ns_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component bd_d92b_csc_0_mul_12ns_16s_28_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (27 downto 0) );
    end component;


    component bd_d92b_csc_0_mac_muladd_12ns_16s_26s_29_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (28 downto 0) );
    end component;


    component bd_d92b_csc_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_16s_12ns_28_1_1_U92 : component bd_d92b_csc_0_mul_16s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => coef11_fu_501_p3,
        din1 => mul_ln192_fu_610_p1,
        dout => mul_ln192_fu_610_p2);

    mul_12ns_16s_28_1_1_U93 : component bd_d92b_csc_0_mul_12ns_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln192_1_fu_616_p0,
        din1 => coef12_fu_506_p3,
        dout => mul_ln192_1_fu_616_p2);

    mul_16s_12ns_28_1_1_U94 : component bd_d92b_csc_0_mul_16s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => coef21_fu_511_p3,
        din1 => mul_ln194_fu_632_p1,
        dout => mul_ln194_fu_632_p2);

    mul_12ns_16s_28_1_1_U95 : component bd_d92b_csc_0_mul_12ns_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln194_1_fu_638_p0,
        din1 => coef22_fu_516_p3,
        dout => mul_ln194_1_fu_638_p2);

    mul_16s_12ns_28_1_1_U96 : component bd_d92b_csc_0_mul_16s_12ns_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 12,
        dout_WIDTH => 28)
    port map (
        din0 => coef31_fu_521_p3,
        din1 => mul_ln196_fu_654_p1,
        dout => mul_ln196_fu_654_p2);

    mul_12ns_16s_28_1_1_U97 : component bd_d92b_csc_0_mul_12ns_16s_28_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 28)
    port map (
        din0 => mul_ln196_1_fu_660_p0,
        din1 => coef32_fu_526_p3,
        dout => mul_ln196_1_fu_660_p2);

    mac_muladd_12ns_16s_26s_29_4_1_U98 : component bd_d92b_csc_0_mac_muladd_12ns_16s_26s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_947_p0,
        din1 => coef13_fu_460_p3,
        din2 => or_ln192_fu_600_p2,
        ce => grp_fu_947_ce,
        dout => grp_fu_947_p3);

    mac_muladd_12ns_16s_26s_29_4_1_U99 : component bd_d92b_csc_0_mac_muladd_12ns_16s_26s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_957_p0,
        din1 => coef23_fu_465_p3,
        din2 => or_ln194_fu_622_p2,
        ce => grp_fu_957_ce,
        dout => grp_fu_957_p3);

    mac_muladd_12ns_16s_26s_29_4_1_U100 : component bd_d92b_csc_0_mac_muladd_12ns_16s_26s_29_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 29)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_967_p0,
        din1 => coef33_fu_470_p3,
        din2 => or_ln196_fu_644_p2,
        ce => grp_fu_967_ce,
        dout => grp_fu_967_p3);

    flow_control_loop_pipe_sequential_init_U : component bd_d92b_csc_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    x_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln136_fu_359_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_136 <= x_3_fu_435_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_136 <= ap_const_lv13_1;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Gpix_reg_1151 <= stream_in_dout(23 downto 12);
                Rpix_reg_1146 <= Rpix_fu_446_p1;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                or_ln150_2_reg_1128 <= or_ln150_2_fu_429_p2;
                or_ln150_2_reg_1128_pp0_iter1_reg <= or_ln150_2_reg_1128;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Gpix_reg_1151_pp0_iter2_reg <= Gpix_reg_1151;
                Rpix_reg_1146_pp0_iter2_reg <= Rpix_reg_1146;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                icmp_ln198_1_reg_1278 <= icmp_ln198_1_fu_828_p2;
                icmp_ln198_reg_1273 <= icmp_ln198_fu_822_p2;
                icmp_ln199_1_reg_1288 <= icmp_ln199_1_fu_840_p2;
                icmp_ln199_reg_1283 <= icmp_ln199_fu_834_p2;
                icmp_ln200_1_reg_1298 <= icmp_ln200_1_fu_852_p2;
                icmp_ln200_reg_1293 <= icmp_ln200_fu_846_p2;
                max_val_reg_1229 <= max_val_fu_666_p3;
                min_val_reg_1236 <= min_val_fu_671_p3;
                mul_ln192_1_reg_1189 <= mul_ln192_1_fu_616_p2;
                mul_ln192_reg_1183 <= mul_ln192_fu_610_p2;
                mul_ln194_1_reg_1206 <= mul_ln194_1_fu_638_p2;
                mul_ln194_reg_1200 <= mul_ln194_fu_632_p2;
                mul_ln196_1_reg_1223 <= mul_ln196_1_fu_660_p2;
                mul_ln196_reg_1217 <= mul_ln196_fu_654_p2;
                or_ln150_2_reg_1128_pp0_iter2_reg <= or_ln150_2_reg_1128_pp0_iter1_reg;
                or_ln150_2_reg_1128_pp0_iter3_reg <= or_ln150_2_reg_1128_pp0_iter2_reg;
                trunc_ln192_1_reg_1248 <= trunc_ln192_1_fu_708_p1;
                trunc_ln192_reg_1243 <= trunc_ln192_fu_700_p1;
                trunc_ln194_1_reg_1258 <= trunc_ln194_1_fu_754_p1;
                trunc_ln194_reg_1253 <= trunc_ln194_fu_746_p1;
                trunc_ln196_1_reg_1268 <= trunc_ln196_1_fu_800_p1;
                trunc_ln196_reg_1263 <= trunc_ln196_fu_792_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Bres_fu_812_p4 <= add_ln196_2_fu_806_p2(29 downto 12);
    Gres_fu_766_p4 <= add_ln194_2_fu_760_p2(29 downto 12);
    Rpix_fu_446_p1 <= stream_in_dout(12 - 1 downto 0);
    Rres_fu_720_p4 <= add_ln192_2_fu_714_p2(29 downto 12);
    add_ln192_2_fu_714_p2 <= std_logic_vector(signed(sext_ln192_5_fu_711_p1) + signed(sext_ln192_4_fu_704_p1));
    add_ln192_3_fu_858_p2 <= std_logic_vector(unsigned(trunc_ln192_1_reg_1248) + unsigned(trunc_ln192_reg_1243));
    add_ln192_4_fu_690_p2 <= std_logic_vector(signed(mul_ln192_1_reg_1189) + signed(mul_ln192_reg_1183));
    add_ln192_fu_694_p2 <= std_logic_vector(signed(sext_ln192_2_fu_687_p1) + signed(sext_ln192_1_fu_684_p1));
    add_ln194_2_fu_760_p2 <= std_logic_vector(signed(sext_ln194_5_fu_757_p1) + signed(sext_ln194_4_fu_750_p1));
    add_ln194_3_fu_862_p2 <= std_logic_vector(unsigned(trunc_ln194_1_reg_1258) + unsigned(trunc_ln194_reg_1253));
    add_ln194_4_fu_736_p2 <= std_logic_vector(signed(mul_ln194_1_reg_1206) + signed(mul_ln194_reg_1200));
    add_ln194_fu_740_p2 <= std_logic_vector(signed(sext_ln194_2_fu_733_p1) + signed(sext_ln194_1_fu_730_p1));
    add_ln196_2_fu_806_p2 <= std_logic_vector(signed(sext_ln196_5_fu_803_p1) + signed(sext_ln196_4_fu_796_p1));
    add_ln196_3_fu_866_p2 <= std_logic_vector(unsigned(trunc_ln196_1_reg_1268) + unsigned(trunc_ln196_reg_1263));
    add_ln196_4_fu_782_p2 <= std_logic_vector(signed(mul_ln196_1_reg_1223) + signed(mul_ln196_reg_1217));
    add_ln196_fu_786_p2 <= std_logic_vector(signed(sext_ln196_2_fu_779_p1) + signed(sext_ln196_1_fu_776_p1));
    and_ln149_fu_399_p2 <= (icmp_ln149_fu_387_p2 and icmp_ln149_1_fu_393_p2);
    and_ln150_fu_417_p2 <= (xor_ln150_fu_411_p2 and or_ln148_fu_381_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_state2_pp0_stage0_iter1, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_state2_pp0_stage0_iter1, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_state2_pp0_stage0_iter1, ap_block_state6_pp0_stage0_iter5)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage0_iter5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(stream_in_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (stream_in_empty_n = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage0_iter5_assign_proc : process(stream_csc_full_n)
    begin
                ap_block_state6_pp0_stage0_iter5 <= (stream_csc_full_n = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln136_fu_359_p2)
    begin
        if (((icmp_ln136_fu_359_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter4_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_136, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_2 <= ap_const_lv13_1;
        else 
            ap_sig_allocacmp_x_2 <= x_fu_136;
        end if; 
    end process;

    coef11_fu_501_p3 <= 
        K11_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        K11_2_read;
    coef12_fu_506_p3 <= 
        K12_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        K12_2_read;
    coef13_fu_460_p3 <= 
        K13_read when (or_ln150_2_reg_1128(0) = '1') else 
        K13_2_read;
    coef21_fu_511_p3 <= 
        K21_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        K21_2_read;
    coef22_fu_516_p3 <= 
        K22_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        K22_2_read;
    coef23_fu_465_p3 <= 
        K23_read when (or_ln150_2_reg_1128(0) = '1') else 
        K23_2_read;
    coef31_fu_521_p3 <= 
        K31_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        K31_2_read;
    coef32_fu_526_p3 <= 
        K32_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        K32_2_read;
    coef33_fu_470_p3 <= 
        K33_read when (or_ln150_2_reg_1128(0) = '1') else 
        K33_2_read;

    grp_fu_947_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_947_ce <= ap_const_logic_1;
        else 
            grp_fu_947_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_947_p0 <= zext_ln106_2_fu_497_p1(12 - 1 downto 0);

    grp_fu_957_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_957_ce <= ap_const_logic_1;
        else 
            grp_fu_957_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_957_p0 <= zext_ln106_2_fu_497_p1(12 - 1 downto 0);

    grp_fu_967_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_967_ce <= ap_const_logic_1;
        else 
            grp_fu_967_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_967_p0 <= zext_ln106_2_fu_497_p1(12 - 1 downto 0);
    icmp_ln136_fu_359_p2 <= "1" when (ap_sig_allocacmp_x_2 = add_ln134) else "0";
    icmp_ln148_1_fu_375_p2 <= "1" when (zext_ln136_fu_365_p1 = ColEnd_read) else "0";
    icmp_ln148_fu_369_p2 <= "0" when (zext_ln136_fu_365_p1 = ColStart_read) else "1";
    icmp_ln149_1_fu_393_p2 <= "1" when (signed(zext_ln136_fu_365_p1) < signed(ColEnd_read)) else "0";
    icmp_ln149_fu_387_p2 <= "1" when (signed(zext_ln136_fu_365_p1) > signed(ColStart_read)) else "0";
    icmp_ln198_1_fu_828_p2 <= "1" when (signed(Rres_fu_720_p4) > signed(zext_ln110_1_fu_680_p1)) else "0";
    icmp_ln198_fu_822_p2 <= "1" when (signed(Rres_fu_720_p4) < signed(zext_ln110_fu_676_p1)) else "0";
    icmp_ln199_1_fu_840_p2 <= "1" when (signed(Gres_fu_766_p4) > signed(zext_ln110_1_fu_680_p1)) else "0";
    icmp_ln199_fu_834_p2 <= "1" when (signed(Gres_fu_766_p4) < signed(zext_ln110_fu_676_p1)) else "0";
    icmp_ln200_1_fu_852_p2 <= "1" when (signed(Bres_fu_812_p4) > signed(zext_ln110_1_fu_680_p1)) else "0";
    icmp_ln200_fu_846_p2 <= "1" when (signed(Bres_fu_812_p4) < signed(zext_ln110_fu_676_p1)) else "0";
    max_val_fu_666_p3 <= 
        ClipMax_read when (or_ln150_2_reg_1128_pp0_iter3_reg(0) = '1') else 
        ClipMax_2_read;
    min_val_fu_671_p3 <= 
        ClampMin_read when (or_ln150_2_reg_1128_pp0_iter3_reg(0) = '1') else 
        ClampMin_2_read;
    mul_ln192_1_fu_616_p0 <= zext_ln106_1_fu_597_p1(12 - 1 downto 0);
    mul_ln192_fu_610_p1 <= zext_ln106_fu_594_p1(12 - 1 downto 0);
    mul_ln194_1_fu_638_p0 <= zext_ln106_1_fu_597_p1(12 - 1 downto 0);
    mul_ln194_fu_632_p1 <= zext_ln106_fu_594_p1(12 - 1 downto 0);
    mul_ln196_1_fu_660_p0 <= zext_ln106_1_fu_597_p1(12 - 1 downto 0);
    mul_ln196_fu_654_p1 <= zext_ln106_fu_594_p1(12 - 1 downto 0);
    offsetB_fu_536_p3 <= (select_ln150_11_fu_531_p3 & ap_const_lv12_0);
    offsetG_fu_549_p3 <= (select_ln150_12_fu_544_p3 & ap_const_lv12_0);
    offsetR_fu_562_p3 <= (select_ln150_13_fu_557_p3 & ap_const_lv12_0);
    or_ln148_fu_381_p2 <= (icmp_ln148_fu_369_p2 or icmp_ln148_1_fu_375_p2);
    or_ln150_1_fu_423_p2 <= (cmp20_not or and_ln150_fu_417_p2);
    or_ln150_2_fu_429_p2 <= (or_ln150_1_fu_423_p2 or cmp17_not);
    or_ln150_fu_405_p2 <= (icmp_ln148_1_fu_375_p2 or and_ln149_fu_399_p2);
    or_ln192_fu_600_p2 <= (offsetR_fu_562_p3 or ap_const_lv26_800);
    or_ln194_fu_622_p2 <= (offsetG_fu_549_p3 or ap_const_lv26_800);
    or_ln196_fu_644_p2 <= (offsetB_fu_536_p3 or ap_const_lv26_800);
    select_ln150_11_fu_531_p3 <= 
        BOffset_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        BOffset_2_read;
    select_ln150_12_fu_544_p3 <= 
        GOffset_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        GOffset_2_read;
    select_ln150_13_fu_557_p3 <= 
        ROffset_read when (or_ln150_2_reg_1128_pp0_iter2_reg(0) = '1') else 
        ROffset_2_read;
    select_ln198_1_fu_886_p3 <= 
        min_val_reg_1236 when (icmp_ln198_reg_1273(0) = '1') else 
        select_ln198_fu_880_p3;
    select_ln198_fu_880_p3 <= 
        max_val_reg_1229 when (icmp_ln198_1_reg_1278(0) = '1') else 
        trunc_ln_fu_870_p4;
    select_ln199_1_fu_930_p3 <= 
        min_val_reg_1236 when (icmp_ln199_reg_1283(0) = '1') else 
        select_ln199_fu_924_p3;
    select_ln199_fu_924_p3 <= 
        max_val_reg_1229 when (icmp_ln199_1_reg_1288(0) = '1') else 
        trunc_ln1_fu_892_p4;
    select_ln200_1_fu_918_p3 <= 
        min_val_reg_1236 when (icmp_ln200_reg_1293(0) = '1') else 
        select_ln200_fu_912_p3;
    select_ln200_fu_912_p3 <= 
        max_val_reg_1229 when (icmp_ln200_1_reg_1298(0) = '1') else 
        trunc_ln2_fu_902_p4;
        sext_ln192_1_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln192_reg_1183),29));

        sext_ln192_2_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln192_1_reg_1189),29));

        sext_ln192_4_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln192_fu_694_p2),30));

        sext_ln192_5_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_947_p3),30));

        sext_ln194_1_fu_730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln194_reg_1200),29));

        sext_ln194_2_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln194_1_reg_1206),29));

        sext_ln194_4_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln194_fu_740_p2),30));

        sext_ln194_5_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_957_p3),30));

        sext_ln196_1_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln196_reg_1217),29));

        sext_ln196_2_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln196_1_reg_1223),29));

        sext_ln196_4_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln196_fu_786_p2),30));

        sext_ln196_5_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_967_p3),30));


    stream_csc_blk_n_assign_proc : process(ap_enable_reg_pp0_iter5, stream_csc_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_csc_blk_n <= stream_csc_full_n;
        else 
            stream_csc_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    stream_csc_din <= ((select_ln200_1_fu_918_p3 & select_ln199_1_fu_930_p3) & select_ln198_1_fu_886_p3);

    stream_csc_write_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            stream_csc_write <= ap_const_logic_1;
        else 
            stream_csc_write <= ap_const_logic_0;
        end if; 
    end process;


    stream_in_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, stream_in_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_blk_n <= stream_in_empty_n;
        else 
            stream_in_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    stream_in_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            stream_in_read <= ap_const_logic_1;
        else 
            stream_in_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_487_p4 <= stream_in_dout(35 downto 24);
    trunc_ln192_1_fu_708_p1 <= grp_fu_947_p3(24 - 1 downto 0);
    trunc_ln192_fu_700_p1 <= add_ln192_4_fu_690_p2(24 - 1 downto 0);
    trunc_ln194_1_fu_754_p1 <= grp_fu_957_p3(24 - 1 downto 0);
    trunc_ln194_fu_746_p1 <= add_ln194_4_fu_736_p2(24 - 1 downto 0);
    trunc_ln196_1_fu_800_p1 <= grp_fu_967_p3(24 - 1 downto 0);
    trunc_ln196_fu_792_p1 <= add_ln196_4_fu_782_p2(24 - 1 downto 0);
    trunc_ln1_fu_892_p4 <= add_ln194_3_fu_862_p2(23 downto 12);
    trunc_ln2_fu_902_p4 <= add_ln196_3_fu_866_p2(23 downto 12);
    trunc_ln_fu_870_p4 <= add_ln192_3_fu_858_p2(23 downto 12);
    x_3_fu_435_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_2) + unsigned(ap_const_lv13_1));
    xor_ln150_fu_411_p2 <= (or_ln150_fu_405_p2 xor ap_const_lv1_1);
    zext_ln106_1_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Gpix_reg_1151_pp0_iter2_reg),28));
    zext_ln106_2_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_487_p4),28));
    zext_ln106_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Rpix_reg_1146_pp0_iter2_reg),28));
    zext_ln110_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_val_fu_666_p3),18));
    zext_ln110_fu_676_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(min_val_fu_671_p3),18));
    zext_ln136_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_2),16));
end behav;
