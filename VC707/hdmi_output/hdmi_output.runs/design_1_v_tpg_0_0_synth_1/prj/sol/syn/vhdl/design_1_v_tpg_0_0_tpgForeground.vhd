-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity design_1_v_tpg_0_0_tpgForeground is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    bckgndYUV_dout : IN STD_LOGIC_VECTOR (35 downto 0);
    bckgndYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    bckgndYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    bckgndYUV_empty_n : IN STD_LOGIC;
    bckgndYUV_read : OUT STD_LOGIC;
    height_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    height_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    height_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    height_val_empty_n : IN STD_LOGIC;
    height_val_read : OUT STD_LOGIC;
    width_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    width_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    width_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    width_val_empty_n : IN STD_LOGIC;
    width_val_read : OUT STD_LOGIC;
    patternId_val_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    patternId_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    patternId_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    patternId_val_empty_n : IN STD_LOGIC;
    patternId_val_read : OUT STD_LOGIC;
    maskId_val_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    maskId_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    maskId_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    maskId_val_empty_n : IN STD_LOGIC;
    maskId_val_read : OUT STD_LOGIC;
    colorFormat_val_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    colorFormat_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    colorFormat_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    colorFormat_val_empty_n : IN STD_LOGIC;
    colorFormat_val_read : OUT STD_LOGIC;
    crossHairX_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    crossHairX_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    crossHairX_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    crossHairX_val_empty_n : IN STD_LOGIC;
    crossHairX_val_read : OUT STD_LOGIC;
    crossHairY_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    crossHairY_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    crossHairY_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    crossHairY_val_empty_n : IN STD_LOGIC;
    crossHairY_val_read : OUT STD_LOGIC;
    boxSize_val_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    boxSize_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    boxSize_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    boxSize_val_empty_n : IN STD_LOGIC;
    boxSize_val_read : OUT STD_LOGIC;
    boxColorR_val_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    boxColorR_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    boxColorR_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    boxColorR_val_empty_n : IN STD_LOGIC;
    boxColorR_val_read : OUT STD_LOGIC;
    boxColorG_val_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    boxColorG_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    boxColorG_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    boxColorG_val_empty_n : IN STD_LOGIC;
    boxColorG_val_read : OUT STD_LOGIC;
    boxColorB_val_dout : IN STD_LOGIC_VECTOR (11 downto 0);
    boxColorB_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    boxColorB_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    boxColorB_val_empty_n : IN STD_LOGIC;
    boxColorB_val_read : OUT STD_LOGIC;
    motionSpeed_val_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    motionSpeed_val_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    motionSpeed_val_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    motionSpeed_val_empty_n : IN STD_LOGIC;
    motionSpeed_val_read : OUT STD_LOGIC;
    ovrlayYUV_din : OUT STD_LOGIC_VECTOR (35 downto 0);
    ovrlayYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
    ovrlayYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
    ovrlayYUV_full_n : IN STD_LOGIC;
    ovrlayYUV_write : OUT STD_LOGIC;
    height_val4_c_din : OUT STD_LOGIC_VECTOR (11 downto 0);
    height_val4_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    height_val4_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    height_val4_c_full_n : IN STD_LOGIC;
    height_val4_c_write : OUT STD_LOGIC;
    width_val7_c_din : OUT STD_LOGIC_VECTOR (12 downto 0);
    width_val7_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    width_val7_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    width_val7_c_full_n : IN STD_LOGIC;
    width_val7_c_write : OUT STD_LOGIC;
    colorFormat_val17_c_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    colorFormat_val17_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    colorFormat_val17_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    colorFormat_val17_c_full_n : IN STD_LOGIC;
    colorFormat_val17_c_write : OUT STD_LOGIC );
end;


architecture behav of design_1_v_tpg_0_0_tpgForeground is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_F00 : STD_LOGIC_VECTOR (11 downto 0) := "111100000000";
    constant ap_const_lv12_800 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal boxHCoord : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal boxVCoord : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal height_val_blk_n : STD_LOGIC;
    signal width_val_blk_n : STD_LOGIC;
    signal patternId_val_blk_n : STD_LOGIC;
    signal maskId_val_blk_n : STD_LOGIC;
    signal colorFormat_val_blk_n : STD_LOGIC;
    signal crossHairX_val_blk_n : STD_LOGIC;
    signal crossHairY_val_blk_n : STD_LOGIC;
    signal boxSize_val_blk_n : STD_LOGIC;
    signal boxColorR_val_blk_n : STD_LOGIC;
    signal boxColorG_val_blk_n : STD_LOGIC;
    signal boxColorB_val_blk_n : STD_LOGIC;
    signal motionSpeed_val_blk_n : STD_LOGIC;
    signal height_val4_c_blk_n : STD_LOGIC;
    signal width_val7_c_blk_n : STD_LOGIC;
    signal colorFormat_val17_c_blk_n : STD_LOGIC;
    signal boxColorB_val_read_reg_442 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal boxColorG_val_read_reg_447 : STD_LOGIC_VECTOR (11 downto 0);
    signal boxColorR_val_read_reg_452 : STD_LOGIC_VECTOR (11 downto 0);
    signal boxSize_val_read_reg_457 : STD_LOGIC_VECTOR (15 downto 0);
    signal crossHairY_val_read_reg_462 : STD_LOGIC_VECTOR (15 downto 0);
    signal crossHairX_val_read_reg_467 : STD_LOGIC_VECTOR (15 downto 0);
    signal colorFormat_val_read_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal motionSpeed_val_read_reg_477 : STD_LOGIC_VECTOR (7 downto 0);
    signal patternId_val_read_reg_482 : STD_LOGIC_VECTOR (7 downto 0);
    signal loopWidth_reg_487 : STD_LOGIC_VECTOR (15 downto 0);
    signal loopHeight_reg_492 : STD_LOGIC_VECTOR (15 downto 0);
    signal tobool_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tobool_reg_497 : STD_LOGIC_VECTOR (0 downto 0);
    signal pixOut_fu_286_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal pixOut_reg_502 : STD_LOGIC_VECTOR (11 downto 0);
    signal hMax_fu_294_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal hMax_reg_507 : STD_LOGIC_VECTOR (15 downto 0);
    signal vMax_fu_300_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal vMax_reg_512 : STD_LOGIC_VECTOR (15 downto 0);
    signal and4_i_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and4_i_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal and10_i_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and10_i_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal and26_i_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and26_i_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_i_fu_360_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_i_reg_537 : STD_LOGIC_VECTOR (8 downto 0);
    signal y_1_reg_542 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal boxVCoord_loc_0_load_reg_550 : STD_LOGIC_VECTOR (15 downto 0);
    signal boxHCoord_loc_0_load_reg_555 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp2_i_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp2_i_reg_560 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_done : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_idle : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_ready : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_bckgndYUV_read : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_din : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_write : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_loc_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_loc_1_out_ap_vld : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_loc_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_loc_1_out_ap_vld : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_ap_vld : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_ap_vld : STD_LOGIC;
    signal grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal boxHCoord_loc_0_fu_124 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal boxVCoord_loc_0_fu_120 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal y_fu_116 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal y_2_fu_399_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln772_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal cmp31_i_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_94_fu_306_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_316_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_330_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_344_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component design_1_v_tpg_0_0_tpgForeground_Pipeline_VITIS_LOOP_774_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        bckgndYUV_dout : IN STD_LOGIC_VECTOR (35 downto 0);
        bckgndYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        bckgndYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        bckgndYUV_empty_n : IN STD_LOGIC;
        bckgndYUV_read : OUT STD_LOGIC;
        ovrlayYUV_din : OUT STD_LOGIC_VECTOR (35 downto 0);
        ovrlayYUV_num_data_valid : IN STD_LOGIC_VECTOR (4 downto 0);
        ovrlayYUV_fifo_cap : IN STD_LOGIC_VECTOR (4 downto 0);
        ovrlayYUV_full_n : IN STD_LOGIC;
        ovrlayYUV_write : OUT STD_LOGIC;
        boxHCoord_loc_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        boxVCoord_loc_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        loopWidth : IN STD_LOGIC_VECTOR (15 downto 0);
        boxColorB : IN STD_LOGIC_VECTOR (11 downto 0);
        pixOut : IN STD_LOGIC_VECTOR (11 downto 0);
        boxColorR : IN STD_LOGIC_VECTOR (11 downto 0);
        and4_i : IN STD_LOGIC_VECTOR (0 downto 0);
        and26_i : IN STD_LOGIC_VECTOR (0 downto 0);
        tobool : IN STD_LOGIC_VECTOR (0 downto 0);
        and10_i : IN STD_LOGIC_VECTOR (0 downto 0);
        patternId_val_load : IN STD_LOGIC_VECTOR (7 downto 0);
        boxSize : IN STD_LOGIC_VECTOR (15 downto 0);
        y : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln1914 : IN STD_LOGIC_VECTOR (7 downto 0);
        vMax : IN STD_LOGIC_VECTOR (15 downto 0);
        hMax : IN STD_LOGIC_VECTOR (15 downto 0);
        zext_ln1914_1 : IN STD_LOGIC_VECTOR (8 downto 0);
        icmp : IN STD_LOGIC_VECTOR (0 downto 0);
        boxColorG : IN STD_LOGIC_VECTOR (11 downto 0);
        crossHairX : IN STD_LOGIC_VECTOR (15 downto 0);
        cmp2_i : IN STD_LOGIC_VECTOR (0 downto 0);
        color : IN STD_LOGIC_VECTOR (7 downto 0);
        boxHCoord_loc_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxHCoord_loc_1_out_ap_vld : OUT STD_LOGIC;
        boxVCoord_loc_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxVCoord_loc_1_out_ap_vld : OUT STD_LOGIC;
        boxHCoord : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxHCoord_ap_vld : OUT STD_LOGIC;
        boxVCoord : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxVCoord_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222 : component design_1_v_tpg_0_0_tpgForeground_Pipeline_VITIS_LOOP_774_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start,
        ap_done => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_done,
        ap_idle => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_idle,
        ap_ready => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_ready,
        bckgndYUV_dout => bckgndYUV_dout,
        bckgndYUV_num_data_valid => ap_const_lv5_0,
        bckgndYUV_fifo_cap => ap_const_lv5_0,
        bckgndYUV_empty_n => bckgndYUV_empty_n,
        bckgndYUV_read => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_bckgndYUV_read,
        ovrlayYUV_din => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_din,
        ovrlayYUV_num_data_valid => ap_const_lv5_0,
        ovrlayYUV_fifo_cap => ap_const_lv5_0,
        ovrlayYUV_full_n => ovrlayYUV_full_n,
        ovrlayYUV_write => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_write,
        boxHCoord_loc_0 => boxHCoord_loc_0_load_reg_555,
        boxVCoord_loc_0 => boxVCoord_loc_0_load_reg_550,
        loopWidth => loopWidth_reg_487,
        boxColorB => boxColorB_val_read_reg_442,
        pixOut => pixOut_reg_502,
        boxColorR => boxColorR_val_read_reg_452,
        and4_i => and4_i_reg_517,
        and26_i => and26_i_reg_527,
        tobool => tobool_reg_497,
        and10_i => and10_i_reg_522,
        patternId_val_load => patternId_val_read_reg_482,
        boxSize => boxSize_val_read_reg_457,
        y => y_1_reg_542,
        zext_ln1914 => motionSpeed_val_read_reg_477,
        vMax => vMax_reg_512,
        hMax => hMax_reg_507,
        zext_ln1914_1 => shl_i_reg_537,
        icmp => icmp_reg_532,
        boxColorG => boxColorG_val_read_reg_447,
        crossHairX => crossHairX_val_read_reg_467,
        cmp2_i => cmp2_i_reg_560,
        color => colorFormat_val_read_reg_472,
        boxHCoord_loc_1_out => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_loc_1_out,
        boxHCoord_loc_1_out_ap_vld => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_loc_1_out_ap_vld,
        boxVCoord_loc_1_out => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_loc_1_out,
        boxVCoord_loc_1_out_ap_vld => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_loc_1_out_ap_vld,
        boxHCoord => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord,
        boxHCoord_ap_vld => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_ap_vld,
        boxVCoord => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord,
        boxVCoord_ap_vld => grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln772_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_ready = ap_const_logic_1)) then 
                    grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    boxHCoord_loc_0_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                boxHCoord_loc_0_fu_124 <= boxHCoord;
            elsif (((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_loc_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                boxHCoord_loc_0_fu_124 <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_loc_1_out;
            end if; 
        end if;
    end process;

    boxVCoord_loc_0_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                boxVCoord_loc_0_fu_120 <= boxVCoord;
            elsif (((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_loc_1_out_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                boxVCoord_loc_0_fu_120 <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_loc_1_out;
            end if; 
        end if;
    end process;

    y_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
                y_fu_116 <= ap_const_lv16_0;
            elsif (((icmp_ln772_fu_394_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                y_fu_116 <= y_2_fu_399_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                and10_i_reg_522 <= and10_i_fu_324_p2;
                and26_i_reg_527 <= and26_i_fu_338_p2;
                and4_i_reg_517 <= and4_i_fu_310_p2;
                boxColorB_val_read_reg_442 <= boxColorB_val_dout;
                boxColorG_val_read_reg_447 <= boxColorG_val_dout;
                boxColorR_val_read_reg_452 <= boxColorR_val_dout;
                boxSize_val_read_reg_457 <= boxSize_val_dout;
                colorFormat_val_read_reg_472 <= colorFormat_val_dout;
                crossHairX_val_read_reg_467 <= crossHairX_val_dout;
                crossHairY_val_read_reg_462 <= crossHairY_val_dout;
                hMax_reg_507 <= hMax_fu_294_p2;
                icmp_reg_532 <= icmp_fu_354_p2;
                loopHeight_reg_492 <= height_val_dout;
                loopWidth_reg_487 <= width_val_dout;
                motionSpeed_val_read_reg_477 <= motionSpeed_val_dout;
                patternId_val_read_reg_482 <= patternId_val_dout;
                    pixOut_reg_502(10 downto 8) <= pixOut_fu_286_p3(10 downto 8);
                    shl_i_reg_537(8 downto 1) <= shl_i_fu_360_p3(8 downto 1);
                tobool_reg_497 <= tobool_fu_274_p2;
                vMax_reg_512 <= vMax_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                boxHCoord <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxHCoord;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                boxHCoord_loc_0_load_reg_555 <= boxHCoord_loc_0_fu_124;
                boxVCoord_loc_0_load_reg_550 <= boxVCoord_loc_0_fu_120;
                cmp2_i_reg_560 <= cmp2_i_fu_411_p2;
                y_1_reg_542 <= y_fu_116;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                boxVCoord <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_boxVCoord;
            end if;
        end if;
    end process;
    pixOut_reg_502(7 downto 0) <= "00000000";
    pixOut_reg_502(11) <= '1';
    shl_i_reg_537(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, ap_CS_fsm_state2, grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_done, ap_CS_fsm_state4, icmp_ln772_fu_394_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln772_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    and10_i_fu_324_p2 <= (tmp_fu_316_p3 and cmp31_i_fu_280_p2);
    and26_i_fu_338_p2 <= (tmp_2_fu_330_p3 and cmp31_i_fu_280_p2);
    and4_i_fu_310_p2 <= (empty_94_fu_306_p1 and cmp31_i_fu_280_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_done)
    begin
        if ((grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, height_val_empty_n, width_val_empty_n, patternId_val_empty_n, maskId_val_empty_n, colorFormat_val_empty_n, crossHairX_val_empty_n, crossHairY_val_empty_n, boxSize_val_empty_n, boxColorR_val_empty_n, boxColorG_val_empty_n, boxColorB_val_empty_n, motionSpeed_val_empty_n, height_val4_c_full_n, width_val7_c_full_n, colorFormat_val17_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (boxColorB_val_empty_n = ap_const_logic_0) or (boxColorG_val_empty_n = ap_const_logic_0) or (boxColorR_val_empty_n = ap_const_logic_0) or (boxSize_val_empty_n = ap_const_logic_0) or (crossHairY_val_empty_n = ap_const_logic_0) or (crossHairX_val_empty_n = ap_const_logic_0) or (colorFormat_val_empty_n = ap_const_logic_0) or (maskId_val_empty_n = ap_const_logic_0) or (patternId_val_empty_n = ap_const_logic_0) or (width_val_empty_n = ap_const_logic_0) or (height_val_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (colorFormat_val17_c_full_n = ap_const_logic_0) or (width_val7_c_full_n = ap_const_logic_0) or (height_val4_c_full_n = ap_const_logic_0) or (motionSpeed_val_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln772_fu_394_p2)
    begin
        if (((icmp_ln772_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln772_fu_394_p2)
    begin
        if (((icmp_ln772_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bckgndYUV_read_assign_proc : process(grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_bckgndYUV_read, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bckgndYUV_read <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_bckgndYUV_read;
        else 
            bckgndYUV_read <= ap_const_logic_0;
        end if; 
    end process;


    boxColorB_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, boxColorB_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            boxColorB_val_blk_n <= boxColorB_val_empty_n;
        else 
            boxColorB_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boxColorB_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            boxColorB_val_read <= ap_const_logic_1;
        else 
            boxColorB_val_read <= ap_const_logic_0;
        end if; 
    end process;


    boxColorG_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, boxColorG_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            boxColorG_val_blk_n <= boxColorG_val_empty_n;
        else 
            boxColorG_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boxColorG_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            boxColorG_val_read <= ap_const_logic_1;
        else 
            boxColorG_val_read <= ap_const_logic_0;
        end if; 
    end process;


    boxColorR_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, boxColorR_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            boxColorR_val_blk_n <= boxColorR_val_empty_n;
        else 
            boxColorR_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boxColorR_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            boxColorR_val_read <= ap_const_logic_1;
        else 
            boxColorR_val_read <= ap_const_logic_0;
        end if; 
    end process;


    boxSize_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, boxSize_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            boxSize_val_blk_n <= boxSize_val_empty_n;
        else 
            boxSize_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    boxSize_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            boxSize_val_read <= ap_const_logic_1;
        else 
            boxSize_val_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp2_i_fu_411_p2 <= "1" when (y_fu_116 = crossHairY_val_read_reg_462) else "0";
    cmp31_i_fu_280_p2 <= "1" when (colorFormat_val_dout = ap_const_lv8_0) else "0";

    colorFormat_val17_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, colorFormat_val17_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            colorFormat_val17_c_blk_n <= colorFormat_val17_c_full_n;
        else 
            colorFormat_val17_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    colorFormat_val17_c_din <= colorFormat_val_dout;

    colorFormat_val17_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            colorFormat_val17_c_write <= ap_const_logic_1;
        else 
            colorFormat_val17_c_write <= ap_const_logic_0;
        end if; 
    end process;


    colorFormat_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, colorFormat_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            colorFormat_val_blk_n <= colorFormat_val_empty_n;
        else 
            colorFormat_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    colorFormat_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            colorFormat_val_read <= ap_const_logic_1;
        else 
            colorFormat_val_read <= ap_const_logic_0;
        end if; 
    end process;


    crossHairX_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, crossHairX_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            crossHairX_val_blk_n <= crossHairX_val_empty_n;
        else 
            crossHairX_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    crossHairX_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            crossHairX_val_read <= ap_const_logic_1;
        else 
            crossHairX_val_read <= ap_const_logic_0;
        end if; 
    end process;


    crossHairY_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, crossHairY_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            crossHairY_val_blk_n <= crossHairY_val_empty_n;
        else 
            crossHairY_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    crossHairY_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            crossHairY_val_read <= ap_const_logic_1;
        else 
            crossHairY_val_read <= ap_const_logic_0;
        end if; 
    end process;

    empty_94_fu_306_p1 <= maskId_val_dout(1 - 1 downto 0);
    grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ap_start_reg;
    hMax_fu_294_p2 <= std_logic_vector(unsigned(width_val_dout) - unsigned(boxSize_val_dout));

    height_val4_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_val4_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_val4_c_blk_n <= height_val4_c_full_n;
        else 
            height_val4_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    height_val4_c_din <= height_val_dout(12 - 1 downto 0);

    height_val4_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            height_val4_c_write <= ap_const_logic_1;
        else 
            height_val4_c_write <= ap_const_logic_0;
        end if; 
    end process;


    height_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, height_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            height_val_blk_n <= height_val_empty_n;
        else 
            height_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    height_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            height_val_read <= ap_const_logic_1;
        else 
            height_val_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_fu_354_p2 <= "0" when (tmp_3_fu_344_p4 = ap_const_lv7_0) else "1";
    icmp_ln772_fu_394_p2 <= "1" when (y_fu_116 = loopHeight_reg_492) else "0";

    maskId_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, maskId_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            maskId_val_blk_n <= maskId_val_empty_n;
        else 
            maskId_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    maskId_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            maskId_val_read <= ap_const_logic_1;
        else 
            maskId_val_read <= ap_const_logic_0;
        end if; 
    end process;


    motionSpeed_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, motionSpeed_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            motionSpeed_val_blk_n <= motionSpeed_val_empty_n;
        else 
            motionSpeed_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    motionSpeed_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            motionSpeed_val_read <= ap_const_logic_1;
        else 
            motionSpeed_val_read <= ap_const_logic_0;
        end if; 
    end process;

    ovrlayYUV_din <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_din;

    ovrlayYUV_write_assign_proc : process(grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ovrlayYUV_write <= grp_tpgForeground_Pipeline_VITIS_LOOP_774_2_fu_222_ovrlayYUV_write;
        else 
            ovrlayYUV_write <= ap_const_logic_0;
        end if; 
    end process;


    patternId_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, patternId_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            patternId_val_blk_n <= patternId_val_empty_n;
        else 
            patternId_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    patternId_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            patternId_val_read <= ap_const_logic_1;
        else 
            patternId_val_read <= ap_const_logic_0;
        end if; 
    end process;

    pixOut_fu_286_p3 <= 
        ap_const_lv12_F00 when (cmp31_i_fu_280_p2(0) = '1') else 
        ap_const_lv12_800;
    shl_i_fu_360_p3 <= (motionSpeed_val_dout & ap_const_lv1_0);
    tmp_2_fu_330_p3 <= maskId_val_dout(2 downto 2);
    tmp_3_fu_344_p4 <= colorFormat_val_dout(7 downto 1);
    tmp_fu_316_p3 <= maskId_val_dout(1 downto 1);
    tobool_fu_274_p2 <= "1" when (maskId_val_dout = ap_const_lv8_0) else "0";
    vMax_fu_300_p2 <= std_logic_vector(unsigned(height_val_dout) - unsigned(boxSize_val_dout));

    width_val7_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_val7_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_val7_c_blk_n <= width_val7_c_full_n;
        else 
            width_val7_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    width_val7_c_din <= width_val_dout(13 - 1 downto 0);

    width_val7_c_write_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            width_val7_c_write <= ap_const_logic_1;
        else 
            width_val7_c_write <= ap_const_logic_0;
        end if; 
    end process;


    width_val_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, width_val_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            width_val_blk_n <= width_val_empty_n;
        else 
            width_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    width_val_read_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then 
            width_val_read <= ap_const_logic_1;
        else 
            width_val_read <= ap_const_logic_0;
        end if; 
    end process;

    y_2_fu_399_p2 <= std_logic_vector(unsigned(y_fu_116) + unsigned(ap_const_lv16_1));
end behav;
